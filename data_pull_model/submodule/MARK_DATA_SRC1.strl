%##########################################################
%#  This module is to control Mark_Data modules.
%##########################################################

module MARK_DATA_SRC:

type StrlSampleRange;
type StrlSampleIndex;
type Debug4Var;
type UnsignedInt;

constant INITIAL_INDEX : StrlSampleIndex;
constant INITIAL_RANGE : StrlSampleRange;
constant INITIAL_UNSIGNEDINT : UnsignedInt;

input name : string;
input My_Sample_Range : StrlSampleRange;
output My_return_value : integer; %{return value for itself to return}%

function GETMARKEDWP(string):StrlSampleIndex;
function GETWP(string):StrlSampleIndex;
function GET_OUTPUTSIZE(string):UnsignedInt;
function ADD_INDEX_SIZE(StrlSampleRange):StrlSampleIndex;
function CMPSAMPLEINDEX(StrlSampleIndex,StrlSampleIndex):integer;
function CMPSAMPLEINDEX1(StrlSampleIndex,StrlSampleIndex):integer;
function GETINDEX(StrlSampleRange):StrlSampleIndex;
function SUBTRACT_A_B(StrlSampleIndex,StrlSampleIndex):integer;
function ROUNDUP_REQUESTSIZE (integer,UnsignedInt):integer;
function SET_SAMPLERANGE(StrlSampleIndex,integer):StrlSampleRange;
function GET_NUMBERINPUTS(string):integer;
function FORECASTS(StrlSampleRange,string):StrlSampleRange;
function REAL_MARK_DATA(StrlSampleIndex,integer,integer,StrlSampleRange,string):integer;
%
% body part
%
var testrange:=INITIAL_RANGE:StrlSampleRange,
    pendingWP:=INITIAL_INDEX:StrlSampleIndex,
    desiredWP:=INITIAL_INDEX:StrlSampleIndex,
    requestSize:=0:integer,
    Flag:=0:integer,
    dataMarkedUpstream:=0:integer, 
    dataNotReadyUpstream:=0:integer,
    temp_int:=0:integer,
    temp_index:=INITIAL_INDEX:StrlSampleIndex,
    temp_unsigned:=INITIAL_UNSIGNEDINT:UnsignedInt in
   trap EXIT_FUNC in
      pendingWP:=GETMARKEDWP(?name);
      desiredWP:=ADD_INDEX_SIZE(?My_Sample_Range);
      if CMPSAMPLEINDEX1(desiredWP,GETWP(?name))<=0 then
	 emit My_return_value(2);
	 exit EXIT_FUNC
      end if;
      if CMPSAMPLEINDEX(pendingWP,GETINDEX(?My_Sample_Range))<0 then
	 emit My_return_value(-1);
	 exit EXIT_FUNC
      end if;      
      requestSize:=SUBTRACT_A_B(desiredWP,pendingWP);
      if requestSize <= 0 then
	 emit My_return_value(-2);
	 exit EXIT_FUNC
      end if;
      temp_unsigned:=GET_OUTPUTSIZE(?name);
      requestSize:=ROUNDUP_REQUESTSIZE (requestSize,temp_unsigned);
      testrange:=SET_SAMPLERANGE(pendingWP,requestSize);
      if dataNotReadyUpstream<>0 then
	 emit My_return_value(dataNotReadyUpstream);
	 exit EXIT_FUNC
      end if;

      temp_int:=REAL_MARK_DATA(pendingWP,requestSize,dataMarkedUpstream,INITIAL_RANGE,?name);
      emit My_return_value(temp_int)
   end trap

end var
end module
