%
%   P_MOD module 
%

module P_MOD:

type StrlSampleRange;
constant INITIAL_RANGE : StrlSampleRange;
input start_mark;
input broadcast_compute:integer;
input input_compute:integer;%{compute}%
output output_compute:integer;%{compute}%
input name:string;
input input_sample_range:StrlSampleRange;
input RET_From_UPstream:integer; %{return type from upstream }%
output My_return_value:integer;
output sig_for_upstream; %{signal to be passed to upstream }%
output Srange_for_upstream:StrlSampleRange;%{Srange value passed to upstream }%
output MyMarkedData:StrlSampleRange;
%
%  body part
%
signal My_Sample_Range:=INITIAL_RANGE:StrlSampleRange in
   loop 
      await immediate start_mark;
      emit My_Sample_Range(?input_sample_range);
      run MARK_DATA[signal RET_From_UPstream/retVal_from_upstream;
		    signal sig_for_upstream/call_upstream;
		    signal Srange_for_upstream/forecastrange];
      present sig_for_upstream then
	 await immediate input_compute;
      else
	 await immediate broadcast_compute;
      end present;
      run COMPUTE_DATA
   end loop
end signal
end module

