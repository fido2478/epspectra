%
% Copyright 2000, 2001 INRIA
% Permission to use, copy, modify, distribute, and sell this software and
% its documentation for any purpose is hereby granted without fee, provided
% that the above copyright notice appear in all copies and that both that
% copyright notice and this permission notice appear in supporting
% documentation, and that the name of INRIA not be used in advertising or
% publicity pertaining to distribution of the software without specific,
% written prior permission.
%
%##########################################################
%#  This module is to control COMPUTE_DATA modules.
%##########################################################

module COMP_DATA:

type VrSampleIndex;
type VrSampleRange;
type VrSampleSize;
type Debug4Var;

constant INITIAL_INDEX : VrSampleIndex;
constant INITIAL_SIZE : VrSampleSize;
constant INITIAL_RANGE : VrSampleRange;
constant INITIAL_DEBUG4VAR : Debug4Var;

input Name : string;
%{output ComputedSRange : VrSampleRange;}%

function DEBUG_INT(string,integer):Debug4Var;
function DEBUG_INDEX(string,VrSampleIndex):Debug4Var;
function DEBUG_RANGE(string,VrSampleRange):Debug4Var;
function CHECK_MYWRITERLL(string):integer;
function CHECK_MYMARKEDDATA_SIZE(string):integer;
function GET_NUMBERINPUTS(string):integer;
%function REALCOMPUTEDATA(string,integer):VrSampleSize;
procedure REALCOMPUTEDATAVR(VrSampleSize)(string,integer);
function CMPSAMPLESIZEVR(VrSampleSize,VrSampleSize):integer;
%function GET_MYMARKEDINDEXVR(string):VrSampleIndex;
%function GET_MYMARKEDSIZEVR(string):VrSampleSize;
procedure GET_MYMARKEDINDEXVR(VrSampleIndex)(string);
procedure GET_MYMARKEDSIZEVR(VrSampleSize)(string);
%function GET_MYMARKEDDATA(string):VrSampleRange;
procedure GET_MYMARKEDINDEXVR(VrSampleIndex)(string);
procedure GET_MYMARKEDSIZEVR(VrSampleSize)(string);
procedure GET_MYMARKEDDATAVR(VrSampleRange)(string);
procedure SET_MARKEDWPVR()(string,VrSampleIndex);
%function ADD_SAMPLEINDEX(VrSampleIndex,VrSampleSize):VrSampleIndex;
procedure ADD_SAMPLEINDEXVR(VrSampleIndex)(VrSampleIndex,VrSampleSize);
procedure WRITEDATA()(string,integer);
%function GETWP(string):VrSampleIndex;
procedure GETWPVR(VrSampleIndex)(string);
%procedure LOCALINCAWAITTICK()(string);%{perfgraph}%
%
% body part
%
var temp_int:=0:integer,
    not_source:=0:integer,
    not_complete_flag:=0:integer,
    temp_index:=INITIAL_INDEX:VrSampleIndex,
    temp_index2:=INITIAL_INDEX:VrSampleIndex,
    temp_size:=INITIAL_SIZE:VrSampleSize,
    temp_range:=INITIAL_RANGE:VrSampleRange,
    complete_var:=INITIAL_SIZE:VrSampleSize in
   trap EXIT_FUNC in
      trap GOTO_UNMARK in

	 if CHECK_MYWRITERLL(?Name)=0 then
	    exit EXIT_FUNC
	 end if;

	 if CHECK_MYMARKEDDATA_SIZE(?Name)=0 then
	    exit EXIT_FUNC
	 end if;

	 if GET_NUMBERINPUTS(?Name)>0 then %{beginif - source skips}%
	    not_source:=1;
	 end if;

%	 complete_var:=REALCOMPUTEDATAVR(?Name,not_source);
	 call REALCOMPUTEDATAVR(complete_var)(?Name,not_source);
	 call GET_MYMARKEDSIZEVR(temp_size)(?Name);
	 if CMPSAMPLESIZEVR(temp_size,complete_var)>0 then
	    not_complete_flag:=not_complete_flag-1
	 end if;
      end trap;%{GOTO_UNMARK}%
%{start Unmark section}%
      if not_complete_flag < 0 then
%	 temp_index:=ADD_SAMPLEINDEX(GET_MYMARKEDINDEX(?Name),complete_var);
	 call GET_MYMARKEDINDEXVR(temp_index2)(?Name);
	 call ADD_SAMPLEINDEXVR(temp_index)(temp_index2,complete_var);
	 call SET_MARKEDWP()(?Name,temp_index)
      end if;
      call WRITEDATA()(?Name,not_source);
%      temp_index:=GETWP(?Name);
      call GETWPVR(temp_index)(?Name);
%{      emit ComputedSRange(GET_MYMARKEDDATA(?Name));}%
   end trap
end var
end module
