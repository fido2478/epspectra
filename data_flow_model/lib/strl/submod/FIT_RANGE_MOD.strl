%
% Copyright 2000, 2001 INRIA
% Permission to use, copy, modify, distribute, and sell this software and
% its documentation for any purpose is hereby granted without fee, provided
% that the above copyright notice appear in all copies and that both that
% copyright notice and this permission notice appear in supporting
% documentation, and that the name of INRIA not be used in advertising or
% publicity pertaining to distribution of the software without specific,
% written prior permission.
%
%##########################################################
%#  This module is to control Mark_Data modules.
%##########################################################

module FIT_RANGE_MOD:

type StrlSampleRange;
type StrlSampleIndex;
type UnsignedInt;
type Debug4Var;%{for debug}%

constant INITIAL_INDEX : StrlSampleIndex;
constant INITIAL_RANGE : StrlSampleRange;
constant INITIAL_UNSIGNEDINT : UnsignedInt;
constant INITIAL_DEBUG4VAR : Debug4Var;%{for debug}%

input Name : string;
input My_Sample_Range : StrlSampleRange;
output output_sample_range : StrlSampleRange;
output input_sample_range: StrlSampleRange;

function DOWNCASTS(StrlSampleRange,string):StrlSampleRange;
%procedure DOWNCASTSNEW()(StrlSampleRange,StrlSampleRange,string);
function GETMARKEDWP(string):StrlSampleIndex;
function ADD_INDEX_SIZE(StrlSampleRange):StrlSampleIndex;
%procedure GETMARKEDWPNEW()(StrlSampleIndex,string);
%procedure ADD_INDEX_SIZENEW()(StrlSampleIndex,StrlSampleRange);
function SUBTRACT_A_B(StrlSampleIndex,StrlSampleIndex):integer;
function GETMAXOUTSIZE(string):integer;
function GET_OUTPUTSIZE(string):UnsignedInt;
function ROUNDOWN_SIZE(integer,UnsignedInt):integer;
function SET_SAMPLERANGE(StrlSampleIndex,integer):StrlSampleRange;
function FORECASTS(StrlSampleRange,string):StrlSampleRange;
%procedure SET_SAMPLERANGENEW()(StrlSampleRange,StrlSampleIndex,integer);
%procedure FORECASTSNEW()(StrlSampleRange,StrlSampleRange,string);
function REAL_FIT_RANGE(StrlSampleIndex,integer,StrlSampleRange,string):integer;
function DEBUG_INT(string,integer):Debug4Var;%{for debug}%
function DEBUG_RANGE(string,StrlSampleRange):Debug4Var;%{for debug}%
function error_exit(integer):integer;
%procedure LOCALINCAWAITTICK()(string);%{perfgraph}%
%
% body part
%
var input_range:=INITIAL_RANGE:StrlSampleRange,
    output_range:=INITIAL_RANGE:StrlSampleRange,
    inside_input:=INITIAL_RANGE:StrlSampleRange,
    pendingWP:=INITIAL_INDEX:StrlSampleIndex,
    desiredWP:=INITIAL_INDEX:StrlSampleIndex,
    requestSize:=0:integer,
    maxOutSize:=0:integer,
    temp_int:=0:integer,
    temp_unsigned:=INITIAL_UNSIGNEDINT:UnsignedInt in
   
   await immediate My_Sample_Range;
   input_range:=?My_Sample_Range;
   output_range:=DOWNCASTS(input_range,?Name);
%   call DOWNCASTSNEW()(output_range,input_range,?Name);
   pendingWP:=GETMARKEDWP(?Name);%{my marked point}%
   desiredWP:=ADD_INDEX_SIZE(output_range);%{upstream's marked point}%
%    call GETMARKEDWPNEW()(pendingWP,?Name);
%    call ADD_INDEX_SIZENEW()(desiredWP,output_range);
   requestSize:=SUBTRACT_A_B(desiredWP,pendingWP);%{evaluate datasize}%
%   maxOutSize:=GETMAXOUTSIZE(?Name);
    if requestSize<0 then
       temp_int:=error_exit(0);
    end if;
%   if requestSize>maxOutSize then
%      requestSize:=maxOutSize
%   end if;
   temp_unsigned:=GET_OUTPUTSIZE(?Name);%{get output unit}%
   requestSize:=ROUNDOWN_SIZE (requestSize,temp_unsigned);
   output_range:=SET_SAMPLERANGE(pendingWP,requestSize);%{set my SampleRange}%
%   call SET_SAMPLERANGENEW()(output_range,pendingWP,requestSize);%{set my SampleRange}%
   inside_input:=FORECASTS(output_range,?Name);
%   call FORECASTSNEW()(inside_input,output_range,?Name);
   temp_int:=REAL_FIT_RANGE(pendingWP,requestSize,inside_input,?Name);
%   call LOCALINCAWAITTICK()(?Name);
   await tick;
   emit output_sample_range(output_range);
   emit input_sample_range(inside_input);
end var
end module
