%################################
%   P_MOD module 
% when the time of marking is longer then that of computing,
% This code traps into deadlock.
%################################

module P_MOD:

input S_Mark_from_Up;%{set timer on}%
input Ack_From_Down;%{start to my mark method}%
output E_Mark_to_Down;%{notify my mark finished to down}%
input S_Compute_from_Up;%{trigger my compute method}%
output E_Compute_to_Down;%{trigger compute method of downstream}%
output Ack_to_Up;%{inform the upstream of finishing computing}%
input snooping;
output sig_on; %{trigger TIMER on the upstream}%

%
%  body part
%

signal switch_on, switch_off in
   [
      loop
	 await S_Mark_from_Up;
	 emit switch_on;
	 if ?S_Mark_from_Up=1 then
	    await Ack_From_Down
	 end if;
	 run MARK_DATA;
	 emit E_Mark_to_Down(?S_Mark_from_Up);
	 emit switch_off;
	 
	 await S_Compute_from_Up;
	 run COMPUTE_DATA;
	 run TIMER[signal snooping/set_on];
	 emit Ack_to_Up;
	 emit E_Compute_to_Down;
      end loop
   ||
      run SWITCH[signal switch_on/On;
		 signal switch_off/Off;
		 signal sig_on/On_Signal];
   ]
end signal
end module
