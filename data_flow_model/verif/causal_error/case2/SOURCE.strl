%
%   SOURCE module 
%

module SOURCE:

type StrlSampleRange;
type Debug4Var;

constant INITIAL_RANGE : StrlSampleRange;

input start_mark;
input start_compute;%{compute}%
input input_compute:integer;%{compute}%
output output_compute:integer;%{compute}%

output source_name:string;
input input_sample_range:StrlSampleRange;

output My_return_value:integer;

output temp:Debug4Var;%{signal for debugging}%
output MyMarkedData:StrlSampleRange;

%
%  body part
%

signal My_Name:string,
    My_Sample_Range:=INITIAL_RANGE:StrlSampleRange in
trap body_loop in 
   [
      every immediate start_mark do
	 [
	    emit My_Sample_Range(?input_sample_range);
	    emit My_Name(?source_name);
	 ||
	    run MARK_DATA_SRC[signal My_Name/name_module;
			      signal My_Sample_Range/sample_range;
			      signal My_return_value/return_value;
			      signal temp/debug_temp];
	 ];
%{
	 emit RET_From_UPstream(2);
	 emit Srange_for_upstream(INITIAL_RANGE);
	 run MARK_DATA[signal source_name/name_module;
		       signal input_sample_range/sample_range;
		       signal RET_From_UPstream/retVal_from_upstream;
		       signal My_return_value/return_value;
		       signal sig_for_upstream/call_upstream;
		       signal Srange_for_upstream/forecastrange;
		       signal temp/debug_temp];
}%
	 exit body_loop;
      end every
   ||
      every immediate start_compute do
	 [
	 emit My_Name(?source_name);
	 ||
	 run COMPUTE_DATA[signal My_Name/name_module;
			  signal input_compute/get_sig;
			  signal output_compute/return_sig;
			  signal MyMarkedData/MYMARKED_DATA;
			  signal temp/debug_temp];
	 ];
	 exit body_loop
      end every
   ];
%{
      await tick;
   end loop
}%
end trap
end signal
end module

