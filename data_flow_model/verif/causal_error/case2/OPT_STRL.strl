%##########################################################
%#  This optimized module is UDP_TX application.
%##########################################################

module OPT_STRL:

type StrlSampleSize;
type StrlSampleIndex;
type StrlSampleRange;
type Debug4Var;

constant INITIAL_INDEX : StrlSampleIndex;
constant INITIAL_SIZE : StrlSampleSize;
constant INITIAL_RANGE : StrlSampleRange;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% parameter of modules
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
constant OUT_RATE = 400000 : integer;
constant IN_RATE = 2000 : integer;
constant OUTPUT_SYMBOL_BITS = 4 : integer;
constant AMPL = 80 : integer;
constant NUM_SYMB = 16 : integer;
constant CONST_NUM = 5 : integer;
constant K = 2 : integer;
constant ALPHA = 1.6f : float;
constant CENTER_FREQ_MULT = 4 : integer;
constant DEFAULT_TPD = 1300.0f : float;

input user_Quit;
input user_Abort;

relation user_Quit # user_Abort;

output Source_module:string;
output Coder_module:string;
output Mod_module:string;
output Summer_module:string;
output Scopesink_module:string;
output Sink_module:string;

inputoutput SOURCE_SRANGE:StrlSampleRange;
inputoutput CODER_SRANGE:StrlSampleRange;
inputoutput MOD_SRANGE:StrlSampleRange;
inputoutput SUMMER_SRANGE:StrlSampleRange;
inputoutput SCOPESINK_SRANGE:StrlSampleRange;
inputoutput SINK_SRANGE:StrlSampleRange;

inputoutput SOURCE_MYMARKEDDATA:StrlSampleRange;
inputoutput CODER_MYMARKEDDATA:StrlSampleRange;
inputoutput MOD_MYMARKEDDATA:StrlSampleRange;
inputoutput SUMMER_MYMARKEDDATA:StrlSampleRange;
inputoutput SCOPESINK_MYMARKEDDATA:StrlSampleRange;
inputoutput SINK_MYMARKEDDATA:StrlSampleRange;

output msg_scopesink:string;
output msg_sink:string;
output message:string;
output debug_source:Debug4Var;
output debug_coder:Debug4Var;
output debug_mod:Debug4Var;
output debug_summer:Debug4Var;
output debug_scopesink:Debug4Var;
output debug_sink:Debug4Var;
output Marked_Type : integer;

function GET_SOURCE(string,integer):string;
function GET_CODER(integer):string;
function GET_MOD_F(integer,float,integer,integer,integer,integer,float,integer):string;
function GET_SUMMER():string;
function GET_SINK(string,integer):string;
function GET_SCOPESINK_F(float,integer,integer,integer,integer):string;
procedure CONNECT_MODULES()(string,string,integer);
function CHOOSESINK(StrlSampleIndex,StrlSampleIndex):integer;
function SET_COMPUTE_FLAG(integer):boolean;

%
% body part
%

signal WP_SINK:=INITIAL_INDEX:StrlSampleIndex,
       WP_SCOPESINK:=INITIAL_INDEX:StrlSampleIndex,
       get_range_scopesink,
       get_range_sink,
       get_markedWP,
       mark_data_sink,
       mark_data_scopesink,
       ticks,
       sig_port_1,sig_port_2,sig_port_3,sig_port_4,
       ret_port_5:=0:integer,
       ret_port_4:=0:integer,
       ret_port_3:=0:integer,
       ret_port_2:=0:integer,
       ret_port_1:=0:integer,
       ret_port_0:=0:integer,
       compute_return_value:=-1:integer,
       compute_source,
       compute_coder,
       compute_mod,
       compute_summer,
       compute_scopesink,
       compute_sink,
       source_name:string, coder_name:string,
       mod_name:string, summer_name:string, 
       scopesink_name:string, sink_name:string in

var nameofsource:string,nameofcoder:string,nameofmod:string,
    nameofsummer:string,nameofscopesink:string,nameofsink:string,
    SCOPESINK_SAMPLE_RANGE:=INITIAL_RANGE:StrlSampleRange,
    SINK_SAMPLE_RANGE:=INITIAL_RANGE:StrlSampleRange,
    FLAG:=0:integer,
    SCOPESINK_FLAG:=false:boolean,
    SINK_FLAG:=false:boolean,
    MARK_FLAG:=false:boolean,
    COMPUTE_FLAG:=false:boolean,
    INITIAL_FLAG:=false:boolean,
    Ret_Mark_Type:=0:integer,
    COUNTER:=0:integer,
    com_source_flag:=false:boolean,
    com_coder_flag:=false:boolean, 
    com_mod_flag:=false:boolean, 
    com_summer_flag:=false:boolean,
    com_scopesink_flag:=false:boolean,
    com_sink_flag:=false:boolean in

abort %[begin abort] for user_Quit

%%%%%%%%%%%%%%%%%%%%%
% create modules
%%%%%%%%%%%%%%%%%%%%%
  nameofsource:=GET_SOURCE("tmp.gz",1);
  nameofcoder:=GET_CODER(OUTPUT_SYMBOL_BITS);
  nameofmod:=GET_MOD_F(OUT_RATE/IN_RATE,65000.0f,AMPL,NUM_SYMB,CONST_NUM,K,ALPHA,CENTER_FREQ_MULT);
  nameofsummer:=GET_SUMMER();
  nameofscopesink:=GET_SCOPESINK_F(DEFAULT_TPD,-128,128,500,1);
  nameofsink:=GET_SINK("localhost",5001);

  emit Source_module(nameofsource);
  emit Coder_module(nameofcoder);
  emit Mod_module(nameofmod);
  emit Summer_module(nameofsummer);
  emit Scopesink_module(nameofscopesink);
  emit Sink_module(nameofsink);
%%%%%%%%%%%%%%%%%%%%%%%%%%
% make topology
%%%%%%%%%%%%%%%%%%%%%%%%%%
  call CONNECT_MODULES()(nameofscopesink,nameofmod,OUT_RATE);
  call CONNECT_MODULES()(nameofsink,nameofsummer,OUT_RATE);
  call CONNECT_MODULES()(nameofsummer,nameofmod,OUT_RATE);
  call CONNECT_MODULES()(nameofmod,nameofcoder,IN_RATE);
  call CONNECT_MODULES()(nameofcoder,nameofsource,IN_RATE*OUTPUT_SYMBOL_BITS/8);

%%%%%%%%%%%%%%%%%%%%%%%%%%
% initialize parameters
%%%%%%%%%%%%%%%%%%%%%%%%%%
%{  emit sink_name(nameofsink);}%
  run INITIALIZE_SINK[signal Sink_module/name_module;
		      signal msg_sink/return_value];
%{  emit scopesink_name(nameofscopesink);}%
  run INITIALIZE_SINK[signal Scopesink_module/name_module;
		      signal msg_scopesink/return_value];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% start scheduling
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  trap schedule_loop in
  loop

     [
	if com_source_flag then
	   emit compute_source;
	end if;
     ||
	if com_coder_flag then
	   emit compute_coder
	end if;
     ||
	if com_mod_flag then
	   emit compute_mod
	end if;
     ||
	if com_summer_flag then
	   emit compute_summer
	end if;
     ||
	if com_scopesink_flag then
	   emit compute_scopesink
	end if;
     ||
	if com_sink_flag then
	   emit compute_sink
	end if;
     ];

%%%%%%%%%%%%%%%%%%%%%%%%
% get marked index
%%%%%%%%%%%%%%%%%%%%%%%%
     MARK_FLAG:=true;
     COUNTER:=COUNTER+1;
     emit get_markedWP;
     [
     run scopesink/
         SINK[signal Scopesink_module/sink_name;
	      signal get_markedWP/get_WP;
	      signal WP_SCOPESINK/MARKEDWP;
	      signal get_range_scopesink/get_RANGE;
	      signal mark_data_scopesink/get_MARKDATA;
	      signal SCOPESINK_SRANGE/S_RANGE; %{input data}%
	      signal sig_port_2/sig_for_upstream; %{output port}%
	      signal MOD_SRANGE/Srange_for_upstream; %{output data}%
	      signal ret_port_2/RET_From_UPstream;%{input ret_val}%
	      signal ret_port_0/My_return_value;%{output ret_val}%
	      signal compute_scopesink/start_compute;%{compute}%
	      signal ret_port_2/input_compute;%{compute}%
	      signal compute_return_value/output_compute;%{compute}%
	      signal SCOPESINK_MYMARKEDDATA/MyMarkedData;%{compute}%
	      signal debug_scopesink/temp]
      ||
      run sink1/
          SINK[signal Sink_module/sink_name;
	       signal get_markedWP/get_WP;
	       signal WP_SINK/MARKEDWP;
	       signal get_range_sink/get_RANGE;
	       signal mark_data_sink/get_MARKDATA;
	       signal SINK_SRANGE/S_RANGE; %{input data}%
	       signal sig_port_1/sig_for_upstream; %{output port}%
	       signal SUMMER_SRANGE/Srange_for_upstream; %{output data}%
	       signal ret_port_1/RET_From_UPstream;%{input ret_val}%
	       signal ret_port_0/My_return_value;%{output ret_val}%
	       signal compute_sink/start_compute;%{compute}%
	       signal ret_port_1/input_compute;%{compute}%
	       signal compute_return_value/output_compute;%{compute}%
	       signal SINK_MYMARKEDDATA/MyMarkedData;%{compute}%
	       signal debug_sink/temp]
      ];
      await tick;
      if CHOOSESINK(?WP_SINK,?WP_SCOPESINK)>0 then
	 emit get_range_scopesink;
	 SCOPESINK_FLAG:=true;
      else
	 emit get_range_sink;
	 SINK_FLAG:=true;
      end if;

      trap compute_loop in
      loop

      trap mark_loop in
      loop

%%%%%%%%%%%%%%%%%%%%%%%%%
% get SampleRange
%%%%%%%%%%%%%%%%%%%%%%%%%
      if MARK_FLAG then
	 [
	 run scopesink/
	     SINK[signal Scopesink_module/sink_name;
		  signal get_markedWP/get_WP;
		  signal WP_SCOPESINK/MARKEDWP;
		  signal get_range_scopesink/get_RANGE;
		  signal mark_data_scopesink/get_MARKDATA;
		  signal SCOPESINK_SRANGE/S_RANGE; %{input data}%
		  signal sig_port_2/sig_for_upstream; %{output port}%
		  signal MOD_SRANGE/Srange_for_upstream; %{output data}%
		  signal ret_port_2/RET_From_UPstream;%{input ret_val}%
		  signal ret_port_0/My_return_value;%{output ret_val}%
		  signal compute_scopesink/start_compute;%{compute}%
		  signal ret_port_2/input_compute;%{compute}%
		  signal compute_return_value/output_compute;%{compute}%
		  signal SCOPESINK_MYMARKEDDATA/MyMarkedData;%{compute}%
		  signal debug_scopesink/temp];
	 present SCOPESINK_SRANGE then
	    SCOPESINK_SAMPLE_RANGE:=?SCOPESINK_SRANGE;
	 end present
	    ||
	 run sink1/
	     SINK[signal Sink_module/sink_name;
		  signal get_markedWP/get_WP;
		  signal WP_SINK/MARKEDWP;
		  signal get_range_sink/get_RANGE;
		  signal mark_data_sink/get_MARKDATA;
		  signal SINK_SRANGE/S_RANGE; %{input data}%
		  signal sig_port_1/sig_for_upstream; %{output port}%
		  signal SUMMER_SRANGE/Srange_for_upstream; %{output data}%
		  signal ret_port_1/RET_From_UPstream;%{input ret_val}%
		  signal ret_port_0/My_return_value;%{output ret_val}%
		  signal compute_sink/start_compute;%{compute}%
		  signal ret_port_1/input_compute;%{compute}%
		  signal compute_return_value/output_compute;%{compute}%
		  signal SINK_MYMARKEDDATA/MyMarkedData;%{compute}%
		  signal debug_sink/temp];
	 present SINK_SRANGE then 
	    SINK_SAMPLE_RANGE:=?SINK_SRANGE;
	 end present
	    ];
      end if;
      
      await tick;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% data-marking phase
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
      if MARK_FLAG then 
	if SCOPESINK_FLAG then
	   emit Scopesink_module(nameofscopesink);
	   emit SCOPESINK_SRANGE(SCOPESINK_SAMPLE_RANGE);
	   emit mark_data_scopesink;
	elsif  SINK_FLAG then
	   emit Sink_module(nameofsink);
	   emit SINK_SRANGE(SINK_SAMPLE_RANGE);
	   emit mark_data_sink;
	end if
      end if;

      if COMPUTE_FLAG then %{Start computing}%
	 [
	    if com_source_flag then
	       emit compute_source;
	       emit ret_port_5(1)
	    end if;
	 ||
	    if com_coder_flag then
	    emit compute_coder
	    end if;
	 ||
	    if com_mod_flag then
	       emit compute_mod
	    end if;
	 ||
	    if com_summer_flag then
	       emit compute_summer
	    end if;
	 ||
	    if com_scopesink_flag then
	       emit compute_scopesink
	    end if;
	 ||
	    if com_sink_flag then
	       emit compute_sink
	    end if;
	 ]
      end if;

   trap mark_compute_loop in
      [
      run source1/
	  SOURCE[signal Source_module/source_name;
		signal sig_port_4/start_mark;%{input port for data-mark}%
		signal SOURCE_SRANGE/input_sample_range;%{input data}%
		signal ret_port_4/My_return_value;%{output ret_val}%
		signal compute_source/start_compute;%{compute}%
		signal ret_port_5/input_compute;%{compute}%
		signal ret_port_4/output_compute;%{compute}%
		signal SOURCE_MYMARKEDDATA/MyMarkedData;%{compute}%
		signal debug_source/temp];
      if MARK_FLAG then com_source_flag:=SET_COMPUTE_FLAG(?ret_port_4) end if
         ||
      run coder/
	  P_MOD[signal Coder_module/p_mod_name;
		signal sig_port_3/start_mark;%{input port for data-mark}%
		signal CODER_SRANGE/input_sample_range;%{input data}%
		signal sig_port_4/sig_for_upstream;%{output port}%
		signal SOURCE_SRANGE/Srange_for_upstream;%{output data}%
		signal ret_port_4/RET_From_UPstream;%{input ret_val}%
		signal ret_port_3/My_return_value;%{output ret_val}%
		signal compute_coder/start_compute;%{compute}%
		signal ret_port_4/input_compute;%{compute}%
		signal ret_port_3/output_compute;%{compute}%
		signal CODER_MYMARKEDDATA/MyMarkedData;%{compute}%
		signal debug_coder/temp];
      if MARK_FLAG then com_coder_flag:=SET_COMPUTE_FLAG(?ret_port_3) end if
         ||
        run digmod/
	    P_MOD[signal Mod_module/p_mod_name;
		signal sig_port_2/start_mark;%{input port for data-mark}%
		signal MOD_SRANGE/input_sample_range;%{input data}%
		signal sig_port_3/sig_for_upstream;%{output port}%
		signal CODER_SRANGE/Srange_for_upstream;%{output data}%
		signal ret_port_3/RET_From_UPstream;%{input ret_val}%
		signal ret_port_2/My_return_value;%{output ret_val}%
		signal compute_mod/start_compute;%{compute}%
		signal ret_port_3/input_compute;%{compute}%
		signal ret_port_2/output_compute;%{compute}%
		signal MOD_MYMARKEDDATA/MyMarkedData;%{compute}%
		signal debug_mod/temp];
      if MARK_FLAG then com_mod_flag:=SET_COMPUTE_FLAG(?ret_port_2) end if
         ||
        run summer/
	    P_MOD[signal Summer_module/p_mod_name;
		   signal sig_port_1/start_mark; %{input port for data-mark}%
		   signal SUMMER_SRANGE/input_sample_range; %{input data}%
		   signal sig_port_2/sig_for_upstream;%{output port}%
		   signal MOD_SRANGE/Srange_for_upstream; %{output data}%
		   signal ret_port_2/RET_From_UPstream;%{input ret_val}%
		   signal ret_port_1/My_return_value;%{output ret_val}%
		   signal compute_summer/start_compute;%{compute}%
		   signal ret_port_2/input_compute;%{compute}%
		   signal ret_port_1/output_compute;%{compute}%
		   signal SUMMER_MYMARKEDDATA/MyMarkedData;%{compute}%
		   signal debug_summer/temp];
      if MARK_FLAG then com_summer_flag:=SET_COMPUTE_FLAG(?ret_port_1) end if
         ||
      run scopesink/
          SINK[signal Scopesink_module/sink_name;
		    signal get_markedWP/get_WP;
		    signal WP_SCOPESINK/MARKEDWP;
		    signal get_range_scopesink/get_RANGE;
		    signal mark_data_scopesink/get_MARKDATA;
		    signal SCOPESINK_SRANGE/S_RANGE; %{input data}%
		    signal sig_port_2/sig_for_upstream; %{output port}%
		    signal MOD_SRANGE/Srange_for_upstream; %{output data}%
		    signal ret_port_2/RET_From_UPstream;%{input ret_val}%
		    signal ret_port_0/My_return_value;%{output ret_val}%
		    signal compute_scopesink/start_compute;%{compute}%
		    signal ret_port_2/input_compute;%{compute}%
		    signal compute_return_value/output_compute;%{compute}%
		    signal SCOPESINK_MYMARKEDDATA/MyMarkedData;%{compute}%
		    signal debug_scopesink/temp];
    if MARK_FLAG then 
       com_scopesink_flag:=SET_COMPUTE_FLAG(?ret_port_0);
    end if;
    if SCOPESINK_FLAG then
       exit mark_compute_loop
    end if;
	 ||   
     run sink1/
         SINK[signal Sink_module/sink_name;
	      signal get_markedWP/get_WP;
	      signal WP_SINK/MARKEDWP;
	      signal get_range_sink/get_RANGE;
	      signal mark_data_sink/get_MARKDATA;
	      signal SINK_SRANGE/S_RANGE; %{input data}%
	      signal sig_port_1/sig_for_upstream; %{output port}%
	      signal SUMMER_SRANGE/Srange_for_upstream; %{output data}%
	      signal ret_port_1/RET_From_UPstream;%{input ret_val}%
	      signal ret_port_0/My_return_value;%{output ret_val}%
	      signal compute_sink/start_compute;%{compute}%
	      signal ret_port_1/input_compute;%{compute}%
	      signal compute_return_value/output_compute;%{compute}%
	      signal SINK_MYMARKEDDATA/MyMarkedData;%{compute}%
	      signal debug_sink/temp];
     if MARK_FLAG then 
	com_sink_flag:=SET_COMPUTE_FLAG(?ret_port_0);
     end if;
     if SINK_FLAG then
	exit mark_compute_loop
     end if;
      ];
   end trap;

     if ?compute_return_value=0 and COMPUTE_FLAG then
	exit compute_loop
     end if;
     await tick;

     if MARK_FLAG then %{MARK_FLAG begin}%
        Ret_Mark_Type:=?ret_port_0;
	emit Marked_Type(Ret_Mark_Type);
%{	await tick;}%

	if Ret_Mark_Type=2 then
	   emit message("All data is finished:2");
	   exit schedule_loop
	elsif Ret_Mark_Type=1 then
	   emit message("Finished marking:1");
	   exit mark_loop
	elsif Ret_Mark_Type=0 then
	   emit message("Up-marked, No computed:0");
	   exit mark_loop
	elsif Ret_Mark_Type=-1 then
	   emit message("No data can be computed:-1")
	elsif Ret_Mark_Type=-2 then
	   emit message("Marked by another thread:-2")
	end if;
	await tick;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% choose another-in case '-1' '-2'
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        if COUNTER > 2 then 
	   exit compute_loop
	end if;
	await tick;

        if SINK_FLAG then
	   SINK_FLAG:=false;
	   SCOPESINK_FLAG:=true
	elsif SCOPESINK_FLAG then
	   SCOPESINK_FLAG:=false;
	   SINK_FLAG:=true
	else
	   emit message("Error1:impossible case");
	   exit schedule_loop
	end if;
     end if;%{MARK_FLAG end}%
     await tick;

      end loop %{mark_loop}%
      end trap; %{mark_loop}%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% compute phase
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%      
%{     await tick;}%
     if COUNTER > 2 then 
	emit message("Error2:case -1,-2")
     else
	if COMPUTE_FLAG and not MARK_FLAG then %{compute phase finished}%
	   COMPUTE_FLAG:=false;
	   MARK_FLAG:=true;
	   INITIAL_FLAG:=true;
	   exit compute_loop
	elsif not COMPUTE_FLAG and MARK_FLAG then %{mark phase finished}%
	   COMPUTE_FLAG:=true;
	   MARK_FLAG:=false;
	   INITIAL_FLAG:=false
	else emit message("Error3:impossible case")
	end if
     end if;
     await tick;

      end loop %{compute_loop}%
      end trap;%{compute_loop}%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% schedule loop
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%{     await tick;}%
     if COMPUTE_FLAG and not MARK_FLAG then
	COMPUTE_FLAG:=false;
	MARK_FLAG:=true;
	COUNTER:=0;
	COMPUTE_FLAG:=false;
	SINK_FLAG:=false;
	SCOPESINK_FLAG:=false;
	com_source_flag:=false;
	com_coder_flag:=false;
	com_mod_flag:=false;
	com_summer_flag:=false;
	com_scopesink_flag:=false;
	com_sink_flag:=false;
%{	INITIAL_FLAG:=true}%
     end if;

     await tick;
%{     if INITIAL_FLAG then
	COUNTER:=0;
	COMPUTE_FLAG:=false;
	MARK_FLAG:=true;
	SINK_FLAG:=false;
	SCOPESINK_FLAG:=false;
	com_source_flag:=false;
	com_coder_flag:=false;
	com_mod_flag:=false;
	com_summer_flag:=false;
	com_scopesink_flag:=false;
	com_sink_flag:=false;
	INITIAL_FLAG:=false
     end if;
     await tick;
}%
  end loop %{schedule_loop}%
  end trap %{schedule_loop}%
when immediate user_Quit
end var 
end signal
end module
