module DRM:

input User_Quit;
inputoutput Source_module;
inputoutput Coder_module;
inputoutput Mod_module;
inputoutput Summer_module;
inputoutput Scopesink_module;
inputoutput Sink_module;
output VIOLATED_DeadlockFreedom;
output VIOLATED_Liveness;

signal Mark_SC2CD, Mark_CD2MD, Mark_MD2SSM, 
       Mark_SM2SN, Compute_SC2CD, Compute_CD2MD, 
       Compute_MD2SSM,Compute_SM2SN,
       Ack_CD2SC, Ack_MD2CD, Ack_SS2MD,Ack_SM2MD,Ack_SN2SM,
       Clock_CD2SC,Clock_MD2CD,Clock_SSM2MD,Clock_SN2SM,
       Ack_Comp_Source, Ack_Comp_Coder, Ack_Comp_Modul, Ack_Comp_Scope, 
       Ack_Comp_Summer, Ack_Comp_Sink,
       Coder_Ready,Modulo_Ready,Scope_Ready,Summer_Ready,Sink_Ready,
       summer_in,modulo_in,coder_in in
abort
  emit Source_module;
  emit Coder_module;
  emit Mod_module;
  emit Summer_module;
  emit Scopesink_module;
  emit Sink_module;
  [
     emit Ack_CD2SC;
   ||
     run source/   
    SOURCE[signal Source_module/Name;
	   signal Mark_SC2CD/output_sample_range;
	   signal Compute_SC2CD/E_Compute_to_Down;
	   signal Ack_CD2SC/Ack_From_Down;
	   signal Clock_CD2SC/snooping;
	   signal Ack_Comp_Source/ComputedSRange];
   ||
      run coder/
    P_MOD[signal Coder_module/Name;
	  signal Mark_SC2CD/S_Mark_from_Up;
	  signal Coder_Ready/Ready2Receive;
	  signal Compute_SC2CD/S_Compute_from_Up;
	  signal Ack_CD2SC/Ack_to_Up;
	  signal Clock_CD2SC/sig_on;
	  signal Mark_CD2MD/output_sample_range;
	  signal Compute_CD2MD/E_Compute_to_Down;
	  signal Ack_MD2CD/Ack_From_Down;
	  signal Clock_MD2CD/snooping;
	  signal Ack_Comp_Coder/ComputedSRange];
   ||
      run modul/
    P_MOD1to2[signal Mod_module/Name;
	      signal Mark_CD2MD/S_Mark_from_Up;
	  signal Modulo_Ready/Ready2Receive;
	  signal Compute_CD2MD/S_Compute_from_Up;
	  signal Ack_MD2CD/Ack_to_Up;
	  signal Clock_MD2CD/sig_on;
	  signal Mark_MD2SSM/output_sample_range;
	  signal Compute_MD2SSM/E_Compute_to_Down;
	  signal Ack_SS2MD/Ack_From_Down1;
	  signal Ack_SM2MD/Ack_From_Down2;
	  signal Clock_SSM2MD/snooping;
	  signal Ack_Comp_Modul/ComputedSRange];
   ||
      run scopesink/
    SINK[signal Scopesink_module/Name;
	 signal Mark_MD2SSM/S_Mark_from_Up;
	  signal Scope_Ready/Ready2Receive;
	 signal Compute_MD2SSM/S_Compute_from_Up;
	 signal Ack_SS2MD/Ack_to_Up;
	 signal Clock_SSM2MD/sig_on;
	 signal Ack_Comp_Scope/ComputedSRange];
   ||
      run summer/
    P_MOD[signal Summer_module/Name;
	  signal Mark_MD2SSM/S_Mark_from_Up;
	  signal Summer_Ready/Ready2Receive;
	  signal Compute_MD2SSM/S_Compute_from_Up;
	  signal Ack_SM2MD/Ack_to_Up;
	  signal Clock_SSM2MD/sig_on;
	  signal Mark_SM2SN/output_sample_range;
	  signal Compute_SM2SN/E_Compute_to_Down;
	  signal Ack_SN2SM/Ack_From_Down;
	  signal Clock_SN2SM/snooping;
	  signal Ack_Comp_Summer/ComputedSRange];
   ||
      run sink/
    SINK[signal Sink_module/Name;
	 signal Mark_SM2SN/S_Mark_from_Up;
	 signal Sink_Ready/Ready2Receive;
	 signal Compute_SM2SN/S_Compute_from_Up;
	 signal Ack_SN2SM/Ack_to_Up;
	 signal Clock_SN2SM/sig_on;
	 signal Ack_Comp_Sink/ComputedSRange];
   ||
     run safety1/
    DEADLOCK_FREE[signal Coder_Ready/Iy, Compute_SC2CD/Ix,
		VIOLATED_DeadlockFreedom/VIOLATED_s]
   ||
     run safety2/
    DEADLOCK_FREE[signal Modulo_Ready/Iy,Compute_CD2MD/Ix,
		VIOLATED_DeadlockFreedom/VIOLATED_s]
   ||
     run safety3/
    DEADLOCK_FREE[signal Summer_Ready/Iy,Compute_MD2SSM/Ix,
		VIOLATED_DeadlockFreedom/VIOLATED_s]
   ||
     run safety4/
    DEADLOCK_FREE[signal Scope_Ready/Iy,Compute_MD2SSM/Ix,
		VIOLATED_DeadlockFreedom/VIOLATED_s]
   ||
     run safety5/
    DEADLOCK_FREE[signal Sink_Ready/Iy,Compute_SM2SN/Ix,
		VIOLATED_DeadlockFreedom/VIOLATED_s]
   ||
     run liveness1/
    B_LIVENESS[signal Ack_CD2SC/Ix,Compute_SC2CD/Iy,
		VIOLATED_Liveness/VIOLATED_s]
   ||
     run CONVERTOR1[signal Mark_SC2CD/IN1,Ack_MD2CD/IN2,coder_in/OUT]
   ||
     run liveness2/
    B_LIVENESS[signal coder_in/Ix,Ack_CD2SC/Iy,
		VIOLATED_Liveness/VIOLATED_s]
   ||
     run CONVERTOR2[signal Mark_CD2MD/IN1,Ack_SS2MD/IN2,Ack_SM2MD/IN3,
		modulo_in/OUT]
   ||
     run liveness3/
    B_LIVENESS[signal modulo_in/Ix,Ack_MD2CD/Iy,
		VIOLATED_Liveness/VIOLATED_s]
   ||
     run CONVERTOR1[signal Mark_MD2SSM/IN1,Ack_SN2SM/IN2,summer_in/OUT]
   ||
     run liveness4/
    B_LIVENESS[signal summer_in/Ix,Ack_SM2MD/Iy,
		VIOLATED_Liveness/VIOLATED_s]
   ||
     run liveness5/
    B_LIVENESS[signal Mark_SM2SN/Ix,Ack_SN2SM/Iy,
		VIOLATED_Liveness/VIOLATED_s]
   ]
when User_Quit
end signal
end module